# api_server.py
"""
FastAPI Server - Web API ho√†n ch·ªânh cho vi·ªác truy v·∫•n Base.vn Candidate API
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List
import os
from dotenv import load_dotenv
from api_client import fetch_candidates
from data_processor import process_candidate_data
import json

# Load environment variables
load_dotenv()

# Kh·ªüi t·∫°o FastAPI app
app = FastAPI(
    title="Base.vn Candidate API Wrapper",
    description="API ho√†n ch·ªânh ƒë·ªÉ truy v·∫•n danh s√°ch ·ª©ng vi√™n t·ª´ Base.vn",
    version="1.0.0"
)


# Pydantic Models cho request/response validation
class CandidateQueryRequest(BaseModel):
    """Model cho request query ·ª©ng vi√™n"""
    access_token: str = Field(..., description="Token x√°c th·ª±c Base.vn API")
    opening_id: str = Field(..., description="ID c·ªßa v·ªã tr√≠ tuy·ªÉn d·ª•ng")
    stage: str = Field(..., description="ID c·ªßa giai ƒëo·∫°n tuy·ªÉn d·ª•ng")
    page: int = Field(default=1, ge=1, description="S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)")
    num_per_page: int = Field(default=50, ge=1, le=100, description="S·ªë l∆∞·ª£ng k·∫øt qu·∫£ m·ªói trang (1-100)")


class CandidateResponse(BaseModel):
    """Model cho response ch·ª©a th√¥ng tin ·ª©ng vi√™n"""
    success: bool
    message: str
    data: Optional[Dict[str, Any]] = None
    status_code: int


class HealthResponse(BaseModel):
    """Model cho health check response"""
    status: str
    message: str


# API Endpoints

@app.get("/", response_model=Dict[str, str])
async def root():
    """
    Root endpoint - Th√¥ng tin v·ªÅ API
    """
    return {
        "message": "Base.vn Candidate API Wrapper",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """
    Health check endpoint - Ki·ªÉm tra tr·∫°ng th√°i c·ªßa API
    """
    return HealthResponse(
        status="healthy",
        message="API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
    )


@app.post("/api/v1/candidates", response_model=CandidateResponse)
async def get_candidates(request: CandidateQueryRequest):
    """
    L·∫•y danh s√°ch ·ª©ng vi√™n t·ª´ Base.vn API
    
    Args:
        request: CandidateQueryRequest ch·ª©a c√°c tham s·ªë truy v·∫•n
        
    Returns:
        CandidateResponse ch·ª©a danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    """
    try:
        # G·ªçi API Base.vn
        response = fetch_candidates(
            access_token=request.access_token,
            opening_id=request.opening_id,
            page=request.page,
            num_per_page=request.num_per_page,
            stage=request.stage
        )
        
        # Ki·ªÉm tra status code
        if response.status_code != 200:
            return CandidateResponse(
                success=False,
                message=f"L·ªói t·ª´ Base.vn API: {response.status_code}",
                data={"error": response.text},
                status_code=response.status_code
            )
        
        # Parse JSON response
        json_data = response.json()
        
        # X·ª≠ l√Ω d·ªØ li·ªáu
        processed_data = process_candidate_data(json_data)
        
        # Chuy·ªÉn DataFrame th√†nh dict ƒë·ªÉ tr·∫£ v·ªÅ JSON
        candidates_list = processed_data["dataframe"].to_dict('records') if not processed_data["dataframe"].empty else []
        
        return CandidateResponse(
            success=True,
            message="L·∫•y danh s√°ch ·ª©ng vi√™n th√†nh c√¥ng",
            data={
                "metrics": processed_data["metrics"],
                "candidates": candidates_list,
                "count": processed_data["count_candidates"]
            },
            status_code=200
        )
        
    except ConnectionError as e:
        raise HTTPException(
            status_code=503,
            detail=f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Base.vn API: {str(e)}"
        )
    except json.JSONDecodeError:
        raise HTTPException(
            status_code=500,
            detail="L·ªói gi·∫£i m√£ JSON t·ª´ Base.vn API"
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"L·ªói server: {str(e)}"
        )


@app.get("/api/v1/candidates", response_model=CandidateResponse)
async def get_candidates_query(
    access_token: str = Query(..., description="Token x√°c th·ª±c Base.vn API"),
    opening_id: str = Query(..., description="ID c·ªßa v·ªã tr√≠ tuy·ªÉn d·ª•ng"),
    stage: str = Query(..., description="ID c·ªßa giai ƒëo·∫°n tuy·ªÉn d·ª•ng"),
    page: int = Query(default=1, ge=1, description="S·ªë trang (b·∫Øt ƒë·∫ßu t·ª´ 1)"),
    num_per_page: int = Query(default=50, ge=1, le=100, description="S·ªë l∆∞·ª£ng k·∫øt qu·∫£ m·ªói trang (1-100)")
):
    """
    L·∫•y danh s√°ch ·ª©ng vi√™n t·ª´ Base.vn API (GET method v·ªõi query parameters)
    
    Args:
        access_token: Token x√°c th·ª±c
        opening_id: ID v·ªã tr√≠ tuy·ªÉn d·ª•ng
        stage: ID giai ƒëo·∫°n tuy·ªÉn d·ª•ng
        page: S·ªë trang
        num_per_page: S·ªë l∆∞·ª£ng m·ªói trang
        
    Returns:
        CandidateResponse ch·ª©a danh s√°ch ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    """
    # T·∫°o request object v√† s·ª≠ d·ª•ng l·∫°i logic t·ª´ POST endpoint
    request = CandidateQueryRequest(
        access_token=access_token,
        opening_id=opening_id,
        stage=stage,
        page=page,
        num_per_page=num_per_page
    )
    return await get_candidates(request)


# Exception handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """Custom handler cho HTTP exceptions"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "message": exc.detail,
            "status_code": exc.status_code
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """Custom handler cho c√°c exceptions kh√°c"""
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "message": f"L·ªói server kh√¥ng mong ƒë·ª£i: {str(exc)}",
            "status_code": 500
        }
    )


if __name__ == "__main__":
    import uvicorn
    
    # L·∫•y c·∫•u h√¨nh t·ª´ environment variables
    host = os.getenv("API_HOST", "0.0.0.0")
    port = int(os.getenv("API_PORT", "8000"))
    
    print(f"üöÄ Starting API Server on {host}:{port}")
    print(f"üìö API Documentation: http://{host}:{port}/docs")
    print(f"üîç Alternative Docs: http://{host}:{port}/redoc")
    
    uvicorn.run(app, host=host, port=port)
