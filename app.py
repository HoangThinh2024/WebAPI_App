# app.py

import os
import streamlit as st
import json
import requests
from dotenv import load_dotenv, set_key
from api_client import fetch_candidates, fetch_openings_list, fetch_opening, fetch_candidate_detail, fetch_candidate_messages
from data_processor import process_candidate_data

# Define SimpleResp at module level
class SimpleResp:
    def __init__(self, status_code, json_data, text):
        self.status_code = status_code
        self._json = json_data
        self.text = text
    
    def json(self):
        return self._json

def display_metrics(metrics):
    """Hi·ªÉn th·ªã c√°c ch·ªâ s·ªë t·ªïng quan."""
    col_total, col_count, col_page = st.columns(3)
    col_total.metric("T·ªïng s·ªë ·ª©ng vi√™n", metrics.get("total"))
    col_count.metric("S·ªë l∆∞·ª£ng tr√™n trang", metrics.get("count"))
    col_page.metric("Trang hi·ªán t·∫°i", metrics.get("page"))

def main():
    # load .env if exists
    ENV_PATH = os.path.join(os.getcwd(), ".env")
    load_dotenv(ENV_PATH)

    st.title("·ª®ng d·ª•ng Truy v·∫•n Base.vn Candidate List API")
    st.markdown("---")

    # --- C·∫•u h√¨nh l∆∞u v√†o .env (kh√¥ng commit) ---
    with st.expander("C·∫•u h√¨nh (l∆∞u v√†o .env, kh√¥ng commit)"):
        with st.form("config_form"):
            st.write("Nh·∫≠p token v√† c√°c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh. C√°c gi√° tr·ªã n√†y s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o `.env`.")
            token_input = st.text_input("BASE_TOKEN", value=os.getenv("BASE_TOKEN", ""))
            opening_input = st.text_input("OPENING_ID", value=os.getenv("OPENING_ID", "9346"))
            stage_input = st.text_input("STAGE_ID", value=os.getenv("STAGE_ID", "75440"))
            num_per_page_default = int(os.getenv("NUM_PER_PAGE", "50") if os.getenv("NUM_PER_PAGE") else 50)
            num_per_page_input = st.number_input("NUM_PER_PAGE", min_value=1, max_value=100, value=num_per_page_default)
            save_cfg = st.form_submit_button("L∆∞u c·∫•u h√¨nh v√†o .env")

        if save_cfg:
            # t·∫°o/ghi .env b·∫±ng python-dotenv
            try:
                set_key(ENV_PATH, "BASE_TOKEN", token_input)
                set_key(ENV_PATH, "OPENING_ID", opening_input)
                set_key(ENV_PATH, "STAGE_ID", stage_input)
                set_key(ENV_PATH, "NUM_PER_PAGE", str(num_per_page_input))
                load_dotenv(ENV_PATH, override=True)
                st.success("ƒê√£ l∆∞u v√†o .env. ƒê·∫£m b·∫£o kh√¥ng commit file .env l√™n git.")
            except Exception as e:
                st.error(f"Kh√¥ng th·ªÉ l∆∞u .env: {e}")

    # --- 1. Form Nh·∫≠p Tham s·ªë T∆∞∆°ng t√°c ---
    with st.form("api_query_form"):
        st.subheader("Tham s·ªë API")

        # Access Token l·∫•y t·ª´ .env n·∫øu c√≥
        access_token = st.text_input(
            "Access Token:", 
            help="Nh·∫≠p access_token ƒë∆∞·ª£c c·∫•p t·ª´ Base.vn", 
            value=os.getenv("BASE_TOKEN", "")
        )

        # N√∫t ƒë·ªÉ load danh s√°ch openings
        load_openings = st.form_submit_button("üîÑ T·∫£i danh s√°ch Opening & Stage")

    # X·ª≠ l√Ω load openings ngo√†i form
    openings_data = []
    opening_options = {}
    
    if load_openings and access_token:
        with st.spinner("ƒêang t·∫£i danh s√°ch openings..."):
            try:
                resp = fetch_openings_list(access_token, page=1, num_per_page=100)
                if resp.status_code == 200:
                    data = resp.json()
                    openings_data = data.get("openings", [])
                    
                    if openings_data:
                        # T·∫°o dict: "ID - T√™n" -> opening object
                        for opening in openings_data:
                            key = f"{opening.get('id')} - {opening.get('name', 'N/A')}"
                            opening_options[key] = opening
                        st.success(f"‚úÖ ƒê√£ t·∫£i {len(openings_data)} openings")
                        # L∆∞u v√†o session state
                        st.session_state['openings'] = opening_options
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y opening n√†o")
                else:
                    st.error(f"L·ªói API: {resp.status_code} - {resp.text}")
            except Exception as e:
                st.error(f"L·ªói: {e}")
    
    # Load t·ª´ session state n·∫øu ƒë√£ c√≥
    if 'openings' in st.session_state:
        opening_options = st.session_state['openings']

    # Form ch√≠nh ƒë·ªÉ query candidates
    with st.form("candidate_query_form"):
        col1, col2 = st.columns(2)
        
        with col1:
            if opening_options:
                # Dropdown ƒë·ªÉ ch·ªçn opening
                selected_opening_key = st.selectbox(
                    "üéØ Ch·ªçn Opening:",
                    options=list(opening_options.keys()),
                    help="Ch·ªçn v·ªã tr√≠ tuy·ªÉn d·ª•ng t·ª´ danh s√°ch"
                )
                
                # L·∫•y opening_id t·ª´ key ƒë√£ ch·ªçn
                selected_opening = opening_options[selected_opening_key]
                opening_id = str(selected_opening.get('id'))
                
                # Hi·ªÉn th·ªã stages n·∫øu c√≥
                stages = selected_opening.get('stages', [])
                if stages:
                    stage_options = {f"{s.get('id')} - {s.get('name', 'N/A')}": s.get('id') for s in stages}
                    selected_stage_key = st.selectbox(
                        "üìä Ch·ªçn Stage:",
                        options=list(stage_options.keys()),
                        help="Ch·ªçn giai ƒëo·∫°n tuy·ªÉn d·ª•ng"
                    )
                    stage = str(stage_options[selected_stage_key])
                else:
                    stage = st.text_input("Stage ID:", value=os.getenv("STAGE_ID", "75440"))
                    st.info("‚ÑπÔ∏è Opening n√†y ch∆∞a c√≥ stages, vui l√≤ng nh·∫≠p th·ªß c√¥ng")
            else:
                st.info("üëÜ Nh·∫•n 'T·∫£i danh s√°ch Opening & Stage' ·ªü tr√™n ƒë·ªÉ load dropdown")
                opening_id = st.text_input("Opening ID:", value=os.getenv("OPENING_ID", "9346"))
                stage = st.text_input("Stage ID:", value=os.getenv("STAGE_ID", "75440"))
            
            page = st.number_input("Trang (page):", min_value=1, value=1)
            
        with col2:
            num_per_page = st.number_input(
                "S·ªë l∆∞·ª£ng/trang:", 
                min_value=1, 
                max_value=100, 
                value=int(os.getenv("NUM_PER_PAGE", "50") if os.getenv("NUM_PER_PAGE") else 50)
            )

        submitted = st.form_submit_button("üöÄ G·ª≠i Y√™u c·∫ßu API")
    
    use_local_proxy = st.checkbox(
        "üîÑ S·ª≠ d·ª•ng Proxy Server Local",
        value=False,
        help="""
        Khi b·∫≠t: G·ª≠i request qua FastAPI proxy server local (http://127.0.0.1:8000/candidates)
        - Proxy s·∫Ω x·ª≠ l√Ω v√† forward request ƒë·∫øn Base.vn API
        - C√≥ th·ªÉ th√™m logging, caching, ho·∫∑c transform data tr∆∞·ªõc khi tr·∫£ v·ªÅ
        - H·ªØu √≠ch cho development v√† debugging
        
        Khi t·∫Øt: G·ª≠i request tr·ª±c ti·∫øp ƒë·∫øn Base.vn API (https://hiring.base.vn/publicapi/v2/candidate/list)
        - K·∫øt n·ªëi tr·ª±c ti·∫øp, kh√¥ng qua trung gian
        - Th√≠ch h·ª£p cho production ho·∫∑c khi kh√¥ng c·∫ßn proxy
        """
    )

    # --- 2. Logic G·ªçi API v√† X·ª≠ l√Ω ---
    if submitted:
        st.info("ƒêang g·ª≠i y√™u c·∫ßu v√† x·ª≠ l√Ω d·ªØ li·ªáu...")
        
        try:
            # N·∫øu ch·ªçn d√πng proxy local, g·ªçi endpoint /candidates tr√™n FastAPI server
            if use_local_proxy:
                proxy_url = os.getenv("LOCAL_PROXY_URL", "http://127.0.0.1:8000/candidates")
                proxy_payload = {
                    "access_token": access_token,
                    "opening_id": opening_id,
                    "page": page,
                    "num_per_page": num_per_page,
                    "stage": stage
                }
                proxy_resp = requests.post(proxy_url, data=proxy_payload)
                # proxy returns JSON with processed data and raw
                if proxy_resp.status_code == 200:
                    proxy_json = proxy_resp.json()
                    # adapt shape used later: set response-like object
                    response = SimpleResp(200, proxy_json.get("raw", {}), json.dumps(proxy_json))
                else:
                    response = SimpleResp(proxy_resp.status_code, {}, proxy_resp.text)
            else:
                # G·ªçi h√†m API t·ª´ module api_client.py tr·ª±c ti·∫øp
                response = fetch_candidates(access_token, opening_id, page, num_per_page, stage)
            
            st.subheader("K·∫øt qu·∫£ Ph·∫£n h·ªìi")
            st.write(f"**M√£ Tr·∫°ng th√°i (Status Code):** `{response.status_code}`")

            if response.status_code == 200:
                json_data = response.json()

                # X·ª≠ l√Ω v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ module data_processor.py
                processed_data = process_candidate_data(json_data)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                display_metrics(processed_data["metrics"])
                
                st.subheader(f"Danh s√°ch ·ª®ng vi√™n (T√¨m th·∫•y: {processed_data['count_candidates']})")
                
                if not processed_data["dataframe"].empty:
                    st.dataframe(processed_data["dataframe"], width="stretch")
                else:
                    st.warning("Kh√¥ng t√¨m th·∫•y ·ª©ng vi√™n n√†o.")
                    
                if st.checkbox("Xem to√†n b·ªô JSON ph·∫£n h·ªìi th√¥"):
                    st.json(json_data)
                    
            else:
                st.error(f"L·ªói: API tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i {response.status_code}.")
                st.code(response.text, language="text")

        except ConnectionError as e:
            st.error(str(e))
        except json.JSONDecodeError:
            st.error("L·ªói gi·∫£i m√£ JSON. API c√≥ th·ªÉ ƒë√£ tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")

    # --- 3. Get Candidate Details ---
    st.markdown("---")
    st.subheader("üîç L·∫•y Chi ti·∫øt ·ª®ng vi√™n")
    
    with st.form("candidate_detail_form"):
        candidate_id_detail = st.text_input(
            "Candidate ID:",
            help="Nh·∫≠p ID c·ªßa ·ª©ng vi√™n c·∫ßn xem chi ti·∫øt",
            value=""
        )
        access_token_detail = st.text_input(
            "Access Token:",
            help="Nh·∫≠p access_token ƒë∆∞·ª£c c·∫•p t·ª´ Base.vn",
            value=os.getenv("BASE_TOKEN", "")
        )
        use_proxy_detail = st.checkbox("üîÑ S·ª≠ d·ª•ng Proxy Server Local", value=False)
        submitted_detail = st.form_submit_button("üîç L·∫•y Chi ti·∫øt ·ª®ng vi√™n")
    
    if submitted_detail and candidate_id_detail:
        st.info("ƒêang l·∫•y chi ti·∫øt ·ª©ng vi√™n...")
        
        try:
            if use_proxy_detail:
                proxy_url = os.getenv("LOCAL_PROXY_URL", f"http://127.0.0.1:8000/candidate/{candidate_id_detail}")
                if not proxy_url.startswith("http://127.0.0.1:8000/candidate/"):
                    proxy_url = f"http://127.0.0.1:8000/candidate/{candidate_id_detail}"
                params = {"access_token": access_token_detail}
                response = requests.post(proxy_url, params=params)
            else:
                response = fetch_candidate_detail(access_token_detail, candidate_id_detail)
            
            st.subheader("K·∫øt qu·∫£ Ph·∫£n h·ªìi")
            st.write(f"**M√£ Tr·∫°ng th√°i (Status Code):** `{response.status_code}`")
            
            if response.status_code == 200:
                json_data = response.json()
                st.success("‚úÖ L·∫•y chi ti·∫øt ·ª©ng vi√™n th√†nh c√¥ng!")
                st.json(json_data)
            else:
                st.error(f"L·ªói: API tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i {response.status_code}.")
                st.code(response.text, language="text")
        
        except ConnectionError as e:
            st.error(str(e))
        except json.JSONDecodeError:
            st.error("L·ªói gi·∫£i m√£ JSON. API c√≥ th·ªÉ ƒë√£ tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        except Exception as e:
            st.error(f"L·ªói: {e}")
    elif submitted_detail and not candidate_id_detail:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Candidate ID")

    # --- 4. Get Candidate Messages ---
    st.markdown("---")
    st.subheader("üí¨ L·∫•y Tin nh·∫Øn ·ª®ng vi√™n")
    
    with st.form("candidate_messages_form"):
        candidate_id_messages = st.text_input(
            "Candidate ID:",
            help="Nh·∫≠p ID c·ªßa ·ª©ng vi√™n c·∫ßn xem tin nh·∫Øn",
            value=""
        )
        access_token_messages = st.text_input(
            "Access Token:",
            help="Nh·∫≠p access_token ƒë∆∞·ª£c c·∫•p t·ª´ Base.vn",
            value=os.getenv("BASE_TOKEN", "")
        )
        use_proxy_messages = st.checkbox("üîÑ S·ª≠ d·ª•ng Proxy Server Local", value=False)
        submitted_messages = st.form_submit_button("üí¨ L·∫•y Tin nh·∫Øn")
    
    if submitted_messages and candidate_id_messages:
        st.info("ƒêang l·∫•y tin nh·∫Øn ·ª©ng vi√™n...")
        
        try:
            if use_proxy_messages:
                proxy_url = os.getenv("LOCAL_PROXY_URL", f"http://127.0.0.1:8000/candidate/{candidate_id_messages}/messages")
                if not proxy_url.startswith("http://127.0.0.1:8000/candidate/"):
                    proxy_url = f"http://127.0.0.1:8000/candidate/{candidate_id_messages}/messages"
                params = {"access_token": access_token_messages}
                response = requests.post(proxy_url, params=params)
            else:
                response = fetch_candidate_messages(access_token_messages, candidate_id_messages)
            
            st.subheader("K·∫øt qu·∫£ Ph·∫£n h·ªìi")
            st.write(f"**M√£ Tr·∫°ng th√°i (Status Code):** `{response.status_code}`")
            
            if response.status_code == 200:
                json_data = response.json()
                st.success("‚úÖ L·∫•y tin nh·∫Øn ·ª©ng vi√™n th√†nh c√¥ng!")
                st.json(json_data)
            else:
                st.error(f"L·ªói: API tr·∫£ v·ªÅ m√£ tr·∫°ng th√°i {response.status_code}.")
                st.code(response.text, language="text")
        
        except ConnectionError as e:
            st.error(str(e))
        except json.JSONDecodeError:
            st.error("L·ªói gi·∫£i m√£ JSON. API c√≥ th·ªÉ ƒë√£ tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
        except Exception as e:
            st.error(f"L·ªói: {e}")
    elif submitted_messages and not candidate_id_messages:
        st.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Candidate ID")


if __name__ == "__main__":
    main()